--[[	gluon site.conf

		This file is loosely related to the original site.conf used in Lübeck.
		There are comments in English and German added to most switches to explain the usage of gluon.

		Diese Datei steht in engem Zusammenhang mit der in Lübeck verwendeten originalen site.conf.
		An den meisten Stellen wurden englisch und deutsche Kommentare hinzugefügt, um die Verwendung von Gluon zu erklären.

	This is lua code now, not perl anymore.
	Dies ist jetzt Lua-Code, nicht mehr perl.

	Happy compiling!
]]

{
	--[[	Community settings
	hostname_prefix:	Nodename prefix - freifunk-abcdef123456 (hex-part is generated from node's MAC address) // Knotennamen-Präfix - freifunk-abcdef123456 (Hex-Teil wird aus der MAC-Adresse des Knotens generiert)
	site_name:		Name of our community // Name unserer Community
	site_code:		Shortcode of our Community // Kürzel unserer Community
	]]
	hostname_prefix = 'ffbrb-',
	site_name = 'Freifunk Brandenburg',
	site_code = 'ffbrb',

	-- 32 bytes of random data, encoded in hexacimal
        -- Must be the same of all nodes in one mesh domain
        -- Can be generated using: echo $(hexdump -n 32 -e '1/1 "%02x"' </dev/urandom)
        -- 32 Bytes Zufallsdaten, hexadezimal codiert
        -- Muss bei allen Knoten in einer Netzdomäne gleich sein
        -- Kann generiert werden mit: echo $(hexdump -n 32 -e '1/1 "%02x"' </dev/urandom)
        domain_seed = '9f5f3bde2a49166e67b2eba89fb203eea1a5de6b2426685c2a0d3e65109acd64',

	opkg = {
	--	lede = 'http://opkg.service.ffbrb/lede/%n/%v/%S/packages',
		extra = {
			modules = 'http://opkg.service.ffbrb/modules/gluon-%GS-%GR/%S',
			},
	},
	
	-- IP address ranges that we use within our network // IP-Adressbereiche, die wir in unserem Netzwerk nutzen
	prefix4 = '10.147.0.0/16',
	prefix6 = '2001:bf7:140::/64',


	--[[	NTP settings
		Synchronize the time of the nodes
	timezone: time zone of our community // Zeitzone unserer Community
		http://wiki.openwrt.org/doc/uci/system#time.zones
	ntp_servers: time server of our community // Zeitserver unserer Community
	List of NTP-Servers to query. You can use any public and/or your private NTP-Servers of your community. http://www.pool.ntp.org/zone/de
	#############
	# NOTE: http://news.ntppool.org/2013/06/ipv6-monitoring-problems-for-g.html
	# > As you might know only "2.pool.ntp.org" (and 2.debian.pool.ntp.org, etc)
	# > returns AAAA records currently.
	#############
	 ]]
	timezone = 'CET-1CEST,M3.5.0,M10.5.0/3',
	ntp_servers = {
				'0.de.pool.ntp.org',
				'1.de.pool.ntp.org',
				'time1.service.ffbrb', 
				'time2.service.ffbrb',
	},


	--[[	Wireless settings
	regdom:			IEEE 802.11 Regulatory Domain
		http://en.wikipedia.org/wiki/IEEE_802.11#Regulatory_domains_and_legal_compliance
	wifi24:			Wifi settings for 2.4 GHz frequency devices // Wifi Konfiguration für 2,4 GHz.
	wifi5:			Wifi settings for 5 GHz frequency devices // Wifi Konfiguration für 5 GHz.
		sub
	ssid:			Wifi name shown to the user (We recommend %site_code%.freifunk.net)
	channel:		Wifi channel to use
	htmode:			Specifies the channel width in 802.11n and 802.11ac mode, possible values are:
						HT20 (single 20MHz channel),
						HT40- (2x 20MHz channels, primary/control channel is upper, secondary channel is below)
						HT40+ (2x 20MHz channels, primary/control channel is lower, secondary channel is above).
						VHT20 / VHT40 / VHT80 / VHT160 (channel width in 802.11ac, extra channels are picked according to the specification)
		http://wiki.openwrt.org/doc/uci/wireless#common.options (-> htmode)
	mesh_ssid:		SSID of the mesh-interface, only used between nodes
	mesh_bssid:		BSSID of the mesh-interface
	                        The supplied default of ff:ff:ff:ff:ff:ff will not work.
	                        You'll need to replace it with randomly generated, non-broadcast BSSID!
	mesh_mcast_rate:	multicast rate of the mesh-interface
	]]
	regdom = 'DE',

	wifi24 = {
		channel = 1,
		--disables 802.11b rates
		supported_rates = {6000, 9000, 12000, 18000, 24000, 36000, 48000, 54000}, -- List of supported wifi rates (optional)
		basic_rate = {6000, 9000, 18000, 36000, 54000}, -- List of basic wifi rates (optional, required if supported_rates is set)
		htmode = 'HT20',
		ap = {
			ssid = 'Freifunk',
		},
		mesh = {
			id = 'ffbrb-mesh',
			mcast_rate = 12000,
		},
	},

	wifi5 = {
		channel = 44,
		htmode = 'HT40+',
		ap = {
			ssid = 'Freifunk',
		},
		mesh = {
			id = 'ffbrb-mesh',
			mcast_rate = 12000,
		},
	},

	-- enable VXLAN for Mesh-on-LAN/WAN

	mesh = {
		vxlan = false,
		filter_membership_reports = false,
		batman_adv = {
			gw_sel_class = 1,
		},
	},

	mesh_on_lan = false,
	mesh_on_wan = false,
	poe_passthrough = true,

	--[[	Next-Node
	next_node:		Howto reach the node you are currently connected to
			The node will always be reachable at that address, and it's the same on all nodes. Because next_node packets are redirected within the node itself, there will be no conflicts.
			Die "next node"-Funktion ermöglicht es Clients, immer den Knoten zu erreichen, mit dem sie gerade verbunden ist.
		sub
	ip4:			IPv4 Address to use (optional)
	ip6:			IPv6 Address to use
	mac:			MAC Address to use
		(TODO: What is the purpose of this MAC-Address here?)
	]]
	next_node = {
		name = { 'node.ffbrb'},
		ip4 = '10.147.0.255',
		ip6 = '2001:bf7:140::ff',

		mac = 'ca:ff:ee:ba:be:00',
	},

	--[[	Gateway settings
	fastd_mesh_vpn:	fastd vpn settings
		https://projects.universe-factory.net/projects/fastd/wiki/User_manual
		sub
	methods:		encryption algorithms to use
		https://projects.universe-factory.net/projects/fastd/wiki/Methods
		When multiple method statements are given, the first one has the highest preference.
	mtu:			package size
	backbone:		fastd vpn gateways of your community
		sub
	limit:			Number of gateways each node connects to
		On startup, each node tries to connect to every gateway, and then chooses the number of 'limit' fastest gateways it could reach
	peers:			Gateways
		sub sub
	key:			public fastd key of your gateway
		https://github.com/tcatm/ecdsautils
	remotes:		List of fastd configuration strings to connect to your gateway server
	]]
	mesh_vpn = {
		mtu = 1406,
		fastd = {
			configurable = true,
			methods = {'salsa2012+umac'},
			groups = {
				backbone = {
					limit = 1,
					peers = {
						gw01 = {
							key = 'bbb3736a562ae8a8ba88f5fad32a099480a544c6cc45362e77f9602e0bae68c7',
							remotes = {
								'ipv4 "gw01.freifunk-brandenburg.de" port 10000', 
								'ipv6 "gw01.freifunk-brandenburg.de" port 10000',
								'ipv4 "78.47.65.102" port 10000', 
								'ipv6 "2a01:4f8:c17:1d5b::2" port 10000',
							},
						},
						gw02 = {
							key = 'f533da0ba441684b9354a78f5aaa997cd11436bc643c96b7483a71d6b11cdcfe',
							remotes = {
								'ipv4 "gw02.freifunk-brandenburg.de" port 10000', 
								'ipv6 "gw02.freifunk-brandenburg.de" port 10000',
								'ipv4 "78.47.137.63" port 10000', 
								'ipv6 "2a01:4f8:c17:1e73::2" port 10000',
							},
						},
						gw06 = {
							key = '02efac3ff697bd9500d6ea39f44b55021038b3d2e322f91b4ed9434d3a6a0f90',
							remotes = {
								'ipv4 "gw06.freifunk-brandenburg.de" port 10000',
								'ipv4 "93.104.214.151" port 10000',
							},
						},
					},
				},
			},
			bandwidth_limit = {
				enabled = true,
				ingress = 9000,
				egress = 400,
			},
		},
	},

	--[[	Autoupdater settings
	branch:			Automatically update to this branch
	branches:		Available branches your community is publishing
		sub sub
	name:			Name of branch (is used when compiling images)
	mirrors:		List of urls where to find the firmware
		just serve the images on port 80 via http. a simple apache file-listing is enough.
		see: http://luebeck.freifunk.net/firmware/
	probability:	How often should a node search for updates
		1.0 - perform an update every hour
		0.5 - on average, perform an update every two hours
		0.0 - inhibit any automatic updates
	good_signatures:	How many signatures should be valid so the node decides to upgrade itself
	pubkeys:		public keys by developers used in manifest file of branch
		manifest file - see gluon readme
		$ make manifest GLUON_BRANCH=mybranch
		$ contrib/sign.sh $SECRETKEY.file images/sysupgrade/manifest
	]]
	autoupdater = {
		branch = 'stable',
		branches = {
			stable = {
				name = 'stable',
				mirrors = {
					'http://firmware.freifunk-brandenburg.de/stable/current/sysupgrade',
					'http://78.47.65.102/stable/current/sysupgrade',
					'http://[2a01:4f8:c17:1d5b::2]/stable/current/sysupgrade',
					'http://updates.services.ffbrb/stable/current/sysupgrade',
				},
				good_signatures = 1,
				pubkeys = {
					'aca32ecdc232ddf0a2668c684db0bb5cb25492a52e2e8f765a9d8bc9d683c2a5', -- jenkins (autobuild)
					'd9995a234e4a5e65d4f2e5d3a8ae0207d42565d05f5bf2c39e94963768d7c414', -- sebastian
					'638582002cd70be53d3824fbd6ee7bde4a1205d1eb78ee0c8ec62b439e2f1f0e', -- bjoern
					'ed27aa5158667252c8b03207cf8678d549b77846bf25b8dea0fea4dd093d90a2', -- andre
				},
			},
			snapshot = {
				name = 'snapshot',
				mirrors = {
					'http://firmware.freifunk-brandenburg.de/snapshot/current/sysupgrade',
					'http://78.47.65.102/snapshot/current/sysupgrade',
					'http://[2a01:4f8:c17:1d5b::2]/snapshot/current/sysupgrade',
					'http://updates.services.ffbrb/snapshot/current/sysupgrade',
				},
				good_signatures = 1,
				pubkeys = {
					'aca32ecdc232ddf0a2668c684db0bb5cb25492a52e2e8f765a9d8bc9d683c2a5', -- jenkins (autobuild)
					'd9995a234e4a5e65d4f2e5d3a8ae0207d42565d05f5bf2c39e94963768d7c414', -- sebastian
					'638582002cd70be53d3824fbd6ee7bde4a1205d1eb78ee0c8ec62b439e2f1f0e', -- bjoern
					'ed27aa5158667252c8b03207cf8678d549b77846bf25b8dea0fea4dd093d90a2', -- andre
				},
			},
			experimental = {
				name = 'experimental',
				mirrors = {
					'http://firmware.freifunk-brandenburg.de/experimental/current/sysupgrade',
					'http://78.47.65.102/experimental/current/sysupgrade',
					'http://[2a01:4f8:c17:1d5b::2]/experimental/current/sysupgrade',
					'http://updates.services.ffbrb/experimental/current/sysupgrade',
				},
				good_signatures = 1,
				pubkeys = {
					'aca32ecdc232ddf0a2668c684db0bb5cb25492a52e2e8f765a9d8bc9d683c2a5', -- jenkins (autobuild)
					'd9995a234e4a5e65d4f2e5d3a8ae0207d42565d05f5bf2c39e94963768d7c414', -- sebastian
					'638582002cd70be53d3824fbd6ee7bde4a1205d1eb78ee0c8ec62b439e2f1f0e', -- bjoern
					'ed27aa5158667252c8b03207cf8678d549b77846bf25b8dea0fea4dd093d90a2', -- andre
				},
			},
		},
	},
	

	-- Show/hide the altitude field -- show password form
	config_mode = {
		geo_location = {
		show_altitude = false,
		},
		owner = {
		obligatory = true,
		},
		remote_login = {
		show_password_form = true,
		},
	},	

        ssid_changer = {
                enabled = true,
                switch_timeframe = 1,           -- only once every timeframe (in minutes) the SSID will change to OFFLINE 
                                                -- set to 1440 to change once a day
                                                -- set to 1 minute to change every time the router gets offline
                first = 2,                      -- the first few minutes directly after reboot within which an Offline-SSID always may be activated
                prefix = 'FF_Offline_',         -- use something short to leave space for the nodename (no '~' allowed!)
                suffix = 'nodename',            -- generate the SSID with either 'nodename', 'mac' or to use only the prefix: 'none'
                tq_limit_enabled = false,       -- if false, the offline SSID will only be set if there is no gateway reacheable
                                                -- upper and lower limit to turn the offline_ssid on and off
                                                -- in-between these two values the SSID will never be changed to prevent it from toggeling every minute.
                tq_limit_max = 55,              -- upper limit, above that the online SSID will be used
                tq_limit_min = 45,              -- lower limit, below that the offline SSID will be used
        },
}

-- /* vi: set ft=lua: */
